runOneStep()
#   Envoyer une valeur à Cormas
r <- setNumericAttributeValue("perderHojas:", "MiRoya", 50)
#   faire 7 step  (il doit bien exister un Repeat non ?)
for(i in 1:7) runOneStep()
runOneStep()
#   Recupérer la valeur d'un indicateur (ex: areaVerde)
area <- getNumericProbe("areaVerde","MiRoya")
#   Dessiner un nouveau graphique
step=seq(0,length(area)-1)
plot(area~ step,type="l",col="black",lwd=2, ylim=c(0,1), xlab="time",ylab="LAI")
runOneStep()
runOneStep()
runOneStep()
runOneStep()
runOneStep()
runOneStep()
runOneStep()
runOneStep()
runOneStep()
runOneStep()
#   Recupérer la valeur d'un indicateur (ex: areaVerde)
area <- getNumericProbe("areaVerde","MiRoya")
#   Dessiner un nouveau graphique
step=seq(0,length(area)-1)
plot(area~ step,type="l",col="black",lwd=2, ylim=c(0,1), xlab="time",ylab="LAI")
#  Faire 1 pas de temps dans CORMAS
runOneStep()
#  Faire 1 pas de temps dans CORMAS
runOneStep()
#  Faire 1 pas de temps dans CORMAS
runOneStep()
runOneStep()
runOneStep()
#   Recupérer la valeur d'un indicateur (ex: areaVerde)
area <- getNumericProbe("areaVerde","MiRoya")
#   Dessiner un nouveau graphique
step=seq(0,length(area)-1)
plot(area~ step,type="l",col="black",lwd=2, ylim=c(0,1), xlab="time",ylab="LAI")
# detach("package:DynACof", unload = TRUE)
# remotes::install_github("VEZY/DynACof")
library("DynACof")
rm(list = ls())
source("cormas-func.R")
library(future)
library(parallel)
library("DynACof")
# Making a regular simulation using example data:
# S= DynACof(Period= as.POSIXct(c("1979-01-01", "1995-01-01")))
# save(S, file= "simuDynacof.rda")
load("simuDynacof.rda")
S2 <- S
cycleDuration=7
currentStep <- 150
#@@@@@@@@@@@ PLOTS @@@@@@@@@@@@@@@@@@@@@@@@@@@@
#plot roya of a simulation
plotRoya <- function() {
lai <- getNumericProbe("areaVerde","MiRoya_Dynacof")
incidRoya <- getNumericProbe("incidenciaRoya","MiRoya_Dynacof")
incidRoyaAlta <- getNumericProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
incidRoyaBaja <- getNumericProbe("incidenciaRoya_Baja","MiRoya_Dynacof")
results <- data.frame(lai, incidenceRoya = incidRoya, incidRoyaAlta, incidRoyaBaja, step=seq(0,length(lai)-1))
r <- plot(results$incidenceRoya~ results$step, type="l",col="black",lwd=2,xlab="steps",ylab="incidencia roya")
r <- lines(results$incidRoyaAlta~ results$step,type="l",col="blue",lwd=2)
r <- lines(results$incidRoyaBaja~ results$step,type="l",col="red",lwd=2)
}
#plot LAI of both simulations
plotLAIs <- function(sim1, sim2) {
plot(sim1$Sim$LAI~ sim1$Meteo$Date,type="l",col="green",xlim=c(S$Meteo$Date[1],S$Meteo$Date[currentStep]), lwd=1,xlab="time",ylab="LAI")
lines(sim2$Sim$LAI~ sim2$Meteo$Date,type="l",col="red",lwd=1,xlab="time",ylab="LAI2")
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#   ************ RUN 100 STEPS *****************
#openVisualWorksAndCormas
openViwualWorks(GUI = F)
#r <- openCormas()
#------------------------#
#------- Test MiRoya -------#
#------------------------#
openModel("MiRoya_Dynacof")
setInit("initUnaParcelaAquiares")
setStep("stepDiarioDynacof:")
activateProbe("areaVerde","MiRoya_Dynacof")
activateProbe("incidenciaRoya","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Baja","MiRoya_Dynacof")
activateProbe("areaVerdeLAI","MiRoya_Dynacof")
activateProbe("hojasPorCafeto","MiRoya_Dynacof")
f <- mclapply(
X = 1:1,
FUN = function(X) {r <- runSimu(currentStep)})
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#   Envoyer une valeur (à currentStep) à Cormas
r <- setNumericAttributeValue("nuevoLAI:", "MiRoya_Dynacof", S2$Sim$LAI[currentStep])
#   faire 7 steps dans Cormas  (evolution de la rouille)
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
# f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")[[2]]
f <- runOneStep()
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
# f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")[[2]]
f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
for (i in (0:cycleDuration)) {
print(i)
f <- runOneStep()
while (!resolved(f)) {
cat("...")
} %plan% multiprocess
}
cat("\n")
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
# f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")[[2]]
# f <- runOneStep()
res <- xml_double(xml_c
for (i in (0:cycleDuration)) {
print(i)
f <- runOneStep()
while (!resolved(f)) {
cat("...")
} %plan% multiprocess
}
cat("\n")
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
# f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")[[2]]
# f <- runOneStep()
res <- xml_double(xml_c
View(f)
View(f)
View(f)
f[[2]][["content"]]
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")[[2]]
View(f)
f[["content"]]
# f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")[[2]]
# f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")
# f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
View(f)
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")
# f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
f <- runOneStep()
# f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
f <- runOneStep()
while (!resolved(f)) {
cat("...")
# f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
print(i)
f <- runOneStep()
while (!resolved(f)) {
cat("...")
}
f <- runOneStep()
while (!resolved(f)) {
cat("...")
}
# f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
f <- setInit("initUnaParcelaAquiares")
# f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
f <- setInit("initUnaParcelaAquiares")
View(f)
View(f)
View(f)
View(f)
View(f)
View(f)
View(f)
View(f)
View(f)
View(f)
View(f)
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")
f <- runOneStep()
while (!resolved(f)) {
cat("...")
} %plan% multiprocess
rm(list = ls())
source("cormas-func.R")
library(future)
library(parallel)
library("DynACof")
# Making a regular simulation using example data:
# S= DynACof(Period= as.POSIXct(c("1979-01-01", "1995-01-01")))
# save(S, file= "simuDynacof.rda")
load("simuDynacof.rda")
S2 <- S
cycleDuration=7
currentStep <- 150
#@@@@@@@@@@@ PLOTS @@@@@@@@@@@@@@@@@@@@@@@@@@@@
#plot roya of a simulation
plotRoya <- function() {
lai <- getNumericProbe("areaVerde","MiRoya_Dynacof")
incidRoya <- getNumericProbe("incidenciaRoya","MiRoya_Dynacof")
incidRoyaAlta <- getNumericProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
incidRoyaBaja <- getNumericProbe("incidenciaRoya_Baja","MiRoya_Dynacof")
results <- data.frame(lai, incidenceRoya = incidRoya, incidRoyaAlta, incidRoyaBaja, step=seq(0,length(lai)-1))
r <- plot(results$incidenceRoya~ results$step, type="l",col="black",lwd=2,xlab="steps",ylab="incidencia roya")
r <- lines(results$incidRoyaAlta~ results$step,type="l",col="blue",lwd=2)
r <- lines(results$incidRoyaBaja~ results$step,type="l",col="red",lwd=2)
}
#plot LAI of both simulations
plotLAIs <- function(sim1, sim2) {
plot(sim1$Sim$LAI~ sim1$Meteo$Date,type="l",col="green",xlim=c(S$Meteo$Date[1],S$Meteo$Date[currentStep]), lwd=1,xlab="time",ylab="LAI")
lines(sim2$Sim$LAI~ sim2$Meteo$Date,type="l",col="red",lwd=1,xlab="time",ylab="LAI2")
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#   ************ RUN 100 STEPS *****************
#openVisualWorksAndCormas
openViwualWorks(GUI = F)
#r <- openCormas()
#------------------------#
#------- Test MiRoya -------#
#------------------------#
openModel("MiRoya_Dynacof")
setInit("initUnaParcelaAquiares")
setStep("stepDiarioDynacof:")
activateProbe("areaVerde","MiRoya_Dynacof")
activateProbe("incidenciaRoya","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Baja","MiRoya_Dynacof")
activateProbe("areaVerdeLAI","MiRoya_Dynacof")
activateProbe("hojasPorCafeto","MiRoya_Dynacof")
f <- mclapply(
X = 1:1,
FUN = function(X) {r <- runSimu(currentStep)})
rm(list = ls())
source("cormas-func.R")
#ADDRESS <- "186.177.79.210"
library("DynACof")
# Making a regular simulation using example data:
# S= DynACof(Period= as.POSIXct(c("1979-01-01", "1995-01-01")))
# save(S, file= "simuDynacof.rda")
load("simuDynacof.rda")
S2 <- S
#currentStep <- 100
#openVisualWorksAndCormas
openViwualWorks(GUI = F)
#r <- openCormas()
#------------------------#
#------- Test MiRoya -------#
#------------------------#
openModel("MiRoya_Dynacof")
setInit("initUnaParcelaAquiares")
setStep("stepDiarioDynacof:")
activateProbe("areaVerde","MiRoya_Dynacof")
activateProbe("incidenciaRoya","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Baja","MiRoya_Dynacof")
activateProbe("areaVerdeLAI","MiRoya_Dynacof")
activateProbe("hojasPorCafeto","MiRoya_Dynacof")
currentStep <- 150
runSimu(currentStep)
#plot roya of a simulation
plotRoya <- function() {
lai <- getNumericProbe("areaVerde","MiRoya_Dynacof")
incidRoya <- getNumericProbe("incidenciaRoya","MiRoya_Dynacof")
incidRoyaAlta <- getNumericProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
incidRoyaBaja <- getNumericProbe("incidenciaRoya_Baja","MiRoya_Dynacof")
results <- data.frame(lai, incidenceRoya = incidRoya, incidRoyaAlta, incidRoyaBaja, step=seq(0,length(lai)-1))
r <- plot(results$incidenceRoya~ results$step, type="l",col="black",lwd=2,xlab="steps",ylab="incidencia roya")
r <- lines(results$incidRoyaAlta~ results$step,type="l",col="blue",lwd=2)
r <- lines(results$incidRoyaBaja~ results$step,type="l",col="red",lwd=2)
}
#plot LAI of both simulations
plotLAIs <- function(sim1, sim2) {
plot(sim1$Sim$LAI~ sim1$Meteo$Date,type="l",col="green",xlim=c(S$Meteo$Date[1],S$Meteo$Date[currentStep]), lwd=1,xlab="time",ylab="LAI")
lines(sim2$Sim$LAI~ sim2$Meteo$Date,type="l",col="red",lwd=1,xlab="time",ylab="LAI2")
}
cycleDuration=7
#run 1 week in MiROya
runOneWeekMiRoya <- function(cycleDuration) {
for (i in (0:cycleDuration)) {
r <- runOneStep()
}
# Recupérer la valeur de areaVerdeLAI
results <- getNumericProbe("areaVerdeLAI","MiRoya_Dynacof")
return(results)
}
for (i in (0:cycleDuration)) {
print(i)
f <- runOneStep()
while (!resolved(f)) {
cat("...")
} %plan% multiprocess
}
cat("\n")
# for (i in 1:7)
# {
#   f <- mclapply(
#     X = 1:1,
#     FUN = function(X) { r <- runOneStep() })
# }
# Recupérer la valeur de areaVerdeLAI
f <- askCormas("SayHello")
#  f <- askCormas("SetInit", "initMethod",c("initUnaParcelaAquiares"))
# f <- getProbe("areaVerdeLAI","MiRoya_Dynacof")
# f <- setInit("initUnaParcelaAquiares")
# f <- runOneStep()
res <- xml_double(xml_contents(xml_find_all(content(f[[2]]),
xpath="//*/ns:result/*")))
results <- getNumericProbe("areaVerdeLAI","MiRoya_Dynacof")
currentStep <- length(results) - 1
library(future)
resolved(f)
!resolved(f)
f <- runOneStep()
while (!resolved(f)) {
cat("...")
for (i in (0:cycleDuration)) {
print(i)
f <- runOneStep()
while (!resolved(f)) {
cat("...")
} %plan% multiprocess
}
cat("\n")
f <- runOneStep()
!resolved(f)
rm(list = ls())
source("cormas-func.R")
library(future)
library(parallel)
library("DynACof")
# Making a regular simulation using example data:
# S= DynACof(Period= as.POSIXct(c("1979-01-01", "1995-01-01")))
# save(S, file= "simuDynacof.rda")
load("simuDynacof.rda")
S2 <- S
cycleDuration=7
currentStep <- 150
#@@@@@@@@@@@ PLOTS @@@@@@@@@@@@@@@@@@@@@@@@@@@@
#plot roya of a simulation
plotRoya <- function() {
lai <- getNumericProbe("areaVerde","MiRoya_Dynacof")
incidRoya <- getNumericProbe("incidenciaRoya","MiRoya_Dynacof")
incidRoyaAlta <- getNumericProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
incidRoyaBaja <- getNumericProbe("incidenciaRoya_Baja","MiRoya_Dynacof")
results <- data.frame(lai, incidenceRoya = incidRoya, incidRoyaAlta, incidRoyaBaja, step=seq(0,length(lai)-1))
r <- plot(results$incidenceRoya~ results$step, type="l",col="black",lwd=2,xlab="steps",ylab="incidencia roya")
r <- lines(results$incidRoyaAlta~ results$step,type="l",col="blue",lwd=2)
r <- lines(results$incidRoyaBaja~ results$step,type="l",col="red",lwd=2)
}
#plot LAI of both simulations
plotLAIs <- function(sim1, sim2) {
plot(sim1$Sim$LAI~ sim1$Meteo$Date,type="l",col="green",xlim=c(S$Meteo$Date[1],S$Meteo$Date[currentStep]), lwd=1,xlab="time",ylab="LAI")
lines(sim2$Sim$LAI~ sim2$Meteo$Date,type="l",col="red",lwd=1,xlab="time",ylab="LAI2")
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#   ************ RUN 100 STEPS *****************
#openVisualWorksAndCormas
openViwualWorks(GUI = F)
#r <- openCormas()
#------------------------#
#------- Test MiRoya -------#
#------------------------#
openModel("MiRoya_Dynacof")
setInit("initUnaParcelaAquiares")
setStep("stepDiarioDynacof:")
activateProbe("areaVerde","MiRoya_Dynacof")
activateProbe("incidenciaRoya","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Alta","MiRoya_Dynacof")
activateProbe("incidenciaRoya_Baja","MiRoya_Dynacof")
activateProbe("areaVerdeLAI","MiRoya_Dynacof")
activateProbe("hojasPorCafeto","MiRoya_Dynacof")
f <- mclapply(
X = 1:1,
FUN = function(X) {r <- runSimu(currentStep)})
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#   Envoyer une valeur (à currentStep) à Cormas
r <- setNumericAttributeValue("nuevoLAI:", "MiRoya_Dynacof", S2$Sim$LAI[currentStep])
#   faire 7 steps dans Cormas  (evolution de la rouille)
#run 1 week in MiROya
for (i in (0:cycleDuration)) {
print(i)
f <- runOneStep()
while (!resolved(f)) {
cat("...")
} %plan% multiprocess
}
cat("\n")
detach("package:DynACof", unload = TRUE)
remotes::install_github("VEZY/DynACof")
# Making a regular simulation using example data:
S= DynACof(Period= as.POSIXct(c("1979-01-01", "1982-01-01")))
detach("package:DynACof", unload = TRUE)
remotes::install_github("VEZY/DynACof")
library("DynACof")
# Making a regular simulation using example data:
S= DynACof(Period= as.POSIXct(c("1979-01-01", "1982-01-01")))
#S= dynacof_i(365:380,S)
S2 <- S
i= 100
for(t in i:(i+150)) {
#S2$Meteo$Tair[t]= S$Meteo$Tair[t]+ t/3
#S2$Sim$CM_Leaf[t-1] = 0.9 * S2$Sim$CM_Leaf[t-1]
S2= dynacof_i(t,S2)
print(t)
}
for(t in i:(i+500)) {
#S2$Meteo$Tair[t]= S$Meteo$Tair[t]+ t/3
#S2$Sim$CM_Leaf[t-1] = 0.9 * S2$Sim$CM_Leaf[t-1]
S2= dynacof_i(t,S2)
print(t)
}
i= 600
for(t in i:(i+200)) {
#S2$Meteo$Tair[t]= S$Meteo$Tair[t]+ t/3
#S2$Sim$CM_Leaf[t-1] = 0.9 * S2$Sim$CM_Leaf[t-1]
S2= dynacof_i(t,S2)
print(t)
}
# detach("package:DynACof", unload = TRUE)
# remotes::install_github("VEZY/DynACof")
library("DynACof")
Sys.setenv(TZ="UTC")
# Making a regular simulation using example data:
S= DynACof(Period= as.POSIXct(c("1979-01-01", "1982-01-01")))
#S= dynacof_i(365:380,S)
S2 <- S
i= 600
for(t in i:(i+200)) {
#S2$Meteo$Tair[t]= S$Meteo$Tair[t]+ t/3
#S2$Sim$CM_Leaf[t-1] = 0.9 * S2$Sim$CM_Leaf[t-1]
S2= dynacof_i(t,S2)
print(t)
}
#plot 2 simulations
#par(mfrow=c(1,2))
plot(S$Sim$LAI~ S$Meteo$Date,type="l",col="green",lwd=1,xlab="time",ylab="LAI")
lines(S2$Sim$LAI~ S2$Meteo$Date,type="l",col="red",lwd=1,xlab="time",ylab="LAI2")
detach("package:DynACof", unload = TRUE)
remotes::install_github("VEZY/DynACof")
